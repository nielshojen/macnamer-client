#!/usr/local/macnamer/namer-python

## Copyright 2022 Niels HÃ¸jen
## Modified from Graham Gilberts original version (https://github.com/grahamgilbert/macnamer)
##
## Licensed under the Apache License, Version 2.0 (the "License");
## you may not use this file except in compliance with the License.
## You may obtain a copy of the License at

## http://www.apache.org/licenses/LICENSE-2.0

## Unless required by applicable law or agreed to in writing, software
## distributed under the License is distributed on an "AS IS" BASIS,
## WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
## See the License for the specific language governing permissions and
## limitations under the License.

import subprocess
import requests
import json
import os, sys
import re
from Foundation import *

###############################################################################
## No Editing needed!
###############################################################################

BUNDLE_ID = 'com.nielshojen.macnamer'

def touch(fname, times=None):
    with open(fname, 'a'):
        os.utime(fname, times)

def set_pref(pref_name, pref_value):
    """Sets a preference, writing it to
        /Library/Preferences/<BUNDLE_ID>.plist.
    """
    try:
        CFPreferencesSetValue(
                              pref_name, pref_value, BUNDLE_ID,
                              kCFPreferencesAnyUser, kCFPreferencesCurrentHost)
        CFPreferencesAppSynchronize(BUNDLE_ID)
    except Exception:
        pass

def pref(pref_name):
    """Return a preference. Since this uses CFPreferencesCopyAppValue,
    Preferences can be defined several places. Precedence is:
        - MCX
        - /var/root/Library/Preferences/<BUNDLE_ID>.plist
        - /Library/Preferences/<BUNDLE_ID>.plist
        - default_prefs defined here.
    """
    default_prefs = {
        'ServerURL': 'http://macnamer',
    }
    pref_value = CFPreferencesCopyAppValue(pref_name, BUNDLE_ID)
    if pref_value == None:
        pref_value = default_prefs.get(pref_name)
        # we're using a default value. We'll write it out to
        # /Library/Preferences/<BUNDLE_ID>.plist for admin
        # discoverability
        set_pref(pref_name, pref_value)
    if isinstance(pref_value, NSDate):
        # convert NSDate/CFDates to strings
        pref_value = str(pref_value)
    return pref_value

if not os.geteuid()==0:
    sys.exit("\nOnly root can run this script\n")

yourserver = pref('ServerURL')

theurl = yourserver+'/checkin/'
pid = str(os.getpid())
pidfile = "/tmp/checkin.pid"

the_command = "ioreg -c \"IOPlatformExpertDevice\" | awk -F '\"' '/IOPlatformSerialNumber/ {print $4}'"

pid = str(os.getpid())
pidfile = "/tmp/checkin.pid"
if os.path.isfile(pidfile):
    print("%s already exists, exiting" % pidfile)
    sys.exit()
else:
    file = open(pidfile, "w")
    file.write(pid)
    file.close()

serial = subprocess.Popen(the_command,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0].decode("UTF-8")
serial = re.sub(r'\s', '', serial)

the_command = "/sbin/ifconfig | grep 'inet ' | grep -v '127.0.0.1' | head -n1 | awk '{print $2}'"
ip = subprocess.Popen(the_command,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0].decode("UTF-8")
ip = re.sub(r'\s', '', ip)
key = pref('Key')
mydata=[('serial',serial),('ip',ip),('key',key)]

try:
    headers = {
        "User-Agent": "macnamer/2.2.0"
    }
    response = requests.post(theurl, data = mydata, headers=headers)
except URLError as e:
    if hasattr(e, 'reason'):
        print('We failed to reach a server.')
        print('Reason: ', e.reason)
        os.unlink(pidfile)
    elif hasattr(e, 'code'):
        print('The server couldn\'t fulfill the request')
        print('Error code: ', e.code)
        os.unlink(pidfile)
else:
    ## got the data from the server, time to get to work!
    os.unlink(pidfile)
    data = response.text
    data = json.loads(data)
    name = data['name']
    prefix = data['prefix']
    divider = data['divider']
    domain = data['domain']
    length = data['length']

    if name:
        ## there's a name there, now to see if we need to exit
        theprocess = "scutil --get ComputerName"
        oldname = subprocess.Popen(theprocess,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0]
        oldname = oldname.strip().decode("UTF-8")
        if prefix:
            name = name.zfill(length)
            newname = prefix+divider+name
        else:
            newname = name
        if prefix:
            # is a prefix set? if so, we need to pad the zeroes
            name = name.zfill(length)

        ## the hostname must be set
        ## if there's a prefix, add that to the name
        ## set the local hostname
        if prefix:
            localname = prefix.replace(' ', '-') + divider.replace(' ', '-') + name.replace(' ', '-')
        else:
            localname = name.replace(' ', '-')
        theprocess = "scutil --get LocalHostName"
        oldname = subprocess.Popen(theprocess,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0]

        localname=re.sub("[^0-9a-zA-Z\-]","",localname)

        if localname !=oldname:
            theprocess = "scutil --set LocalHostName" + " " +localname
            p = subprocess.Popen(theprocess,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0]

        ## set the bonjour name
        if prefix:
            desiredname = prefix + divider + name
        else:
            desiredname = name
        theprocess = "scutil --get ComputerName"
        oldname = subprocess.Popen(theprocess,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0]

        if oldname != desiredname:
            theprocess = "scutil --set ComputerName" + " \"" +desiredname + "\""
            p = subprocess.Popen(theprocess,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0]

        ## if a domain is set, set the computer hostname
        if domain:
            newname = localname+"."+domain
        else:
            newname = localname+".local"
        theprocess = "scutil --get HostName"
        oldhostname = subprocess.Popen(theprocess,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0].strip()

        if oldhostname == newname:
            print("Hostname is the same, no need to change")
        else:
            theprocess = "scutil --set HostName" + " " +newname.lower()
            p = subprocess.Popen(theprocess,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0]

        ## if a domain is set, set the cli hostname
        if domain:
            newname = localname+"."+domain
        else:
            newname = localname+".local"
        theprocess = "hostname"
        oldhostname = subprocess.Popen(theprocess,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0].strip()

        if oldhostname == newname:
            print("Hostname is the same, no need to change")
        else:
            theprocess = "hostname" + " " +newname.lower()
            p = subprocess.Popen(theprocess,shell=True, stdin=subprocess.PIPE, stdout=subprocess.PIPE).communicate()[0]
